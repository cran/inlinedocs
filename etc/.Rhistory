parsed
str(parsed)
parsed[[1]]
parsed[[2]]
sapply(parsed,attr)
sapply(parsed,attr,"Rd_tag")
RdTags(parsed)
tools:::RdTags(parsed)
tools:::RdTags
tools:::RdTags(parsed)
parsed[tools:::RdTags(parsed)=="TEXT"]
=="\n"
parsed[tools:::RdTags(parsed)=="TEXT"]=="\n"
tools:::RdTags(parsed)
parsed[[9]]
unlist(parsed)
cat(unlist(parsed))
parsed[[9]]
parsed[[11]
]
print.Rd
tools:::print.Rd
print(parsed)
tools:::RdTags(parsed)
parsed[[13]]
structure("\\item{\\dots}{Parameters to pass to \code{TRUE} Parser functions.}",Rd_tag="TEXT",class="Rd")
structure("\\item{\\dots}{Parameters to pass to \\code{TRUE} Parser functions.}",Rd_tag="TEXT",class="Rd")
foo <- structure("\\item{\\dots}{Parameters to pass to \\code{TRUE} Parser functions.}",Rd_tag="TEXT",class="Rd")
tools:::print.Rd
print(foo,TRUE)
foo
foo <- structure("\\item{\\dots}{Parameters to pass to Parser functions.}",Rd_tag="TEXT",class="Rd")
structure("\\item{\\dots}{Parameters to pass to Parser functions.}",Rd_tag="TEXT",class="Rd")
structure("Parameters to pass to Parser functions.",Rd_tag="TEXT",class="Rd")
str(parsed)
?dnorm
?curve
parseRd
parse_Rd
print.Rd
tools:::print.Rd
getwd()
package.skeleton("/tmp/RtmpOyg2lt/silly/R/silly.R")
package.skeleton(code_files"/tmp/RtmpOyg2lt/silly/R/silly.R")
package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
unlink("anRpackage",recursive=TRUE);package.skeleton(code_files="/tmp/RtmpOyg2lt/silly/R/silly.R")
rd
rd
cat(rd
)
install.packages("directlabels")
getwd()
extract.file.parse("A_test.R")
extract.file.parse
extract.file.parse(readLines("A_test.R"))
docs <- extract.file.parse(readLines("A_test.R"))
docs
docs <- extract.docs.file(readLines("A_test.R"))
docs <- extract.docs.file("A_test.R")
docs
test.file("../inst/testfiles/escape.percent.R")
save.test.result("../inst/testfiles/escape.percent.R")
save.test.result("../inst/testfiles/escape.percent.R")
test.file("../inst/testfiles/escape.percent.R")
traceback()
test.file("../inst/testfiles/escape.percent.R")
dir("../inst/testfiles/")
for(f in dir("../inst/testfiles/"))test.file(file.path("../inst/testfiles",f))
test.file("../inst/testfiles/escape.percent.R")
extract.docs.file("../inst/testfiles/escape.percent.R")
source("../inst/testfiles/escape.percent.R")
.result
for(f in dir("../inst/testfiles/"))test.file(file.path("../inst/testfiles",f))
traceback(
)
for(f in dir("../inst/testfiles/"))test.file(file.path("../inst/testfiles",f))
not.expected
result
.result
f
Q
Sys.glob("../inst/testfiles/*.R")
for(f in Sys.glob("../inst/testfiles/*.R"))test.file(f)
test.file("../inst/testfiles/jss.R")
test.file("../inst/testfiles/jss.R")
c
c
c
c
Q
test.file("../inst/testfiles/jss.R")
txt
cat(txt)
n
utxt
n
n
n
n
cat(txt)
c
c
test.file("../inst/testfiles/jss.R")
Q
test.file("../inst/testfiles/jss.R")
for(f in Sys.glob("../inst/testfiles/*.R"))test.file(f)
setwd("../..")
getwd()
for(f in Sys.glob("../inst/testfiles/paren-ex.R"))test.file(f)
test.file("../inst/testfiles/paren-ex.R")
test.file("inlinedocs/inst/testfiles/paren-ex.R")
test.file("inlinedocs/inst/testfiles/paren-ex.R")
test.file("inlinedocs/inst/testfiles/paren-ex.R")
test.file("inlinedocs/inst/testfiles/paren-ex.R")
test.file("inlinedocs/inst/testfiles/paren-ex.R")
for(f in Sys.glob("../inst/testfiles/paren-ex.R"))test.file(f)
for(f in Sys.glob("../inst/testfiles/*.R"))test.file(f)
for(f in Sys.glob("inlinedocs/inst/testfiles/*.R"))test.file(f)
test.file("inlinedocs/inst/testfiles/space-before-end.R")
for(f in Sys.glob("inlinedocs/inst/testfiles/*.R"))test.file(f)
getwd()
inlinedocs:::extract.file.parse
inlinedocs:::apply.parsers
traceback()
code
Q
extracted
code
txt
Q
extracted[1,]
as.list(extracted[1,])
apply(extracted,1,as.list)
Q
